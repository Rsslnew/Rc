import sys
import json
import random
import asyncio
import logging
import time
import traceback
import configparser
from pathlib import Path

import uvloop
from pyrogram import Client, idle, filters, types
from pyrogram.handlers import MessageHandler

from config import channels


ERROR_SLEEP = 20

uvloop.install()

logging.basicConfig(filename='logs.log', level=logging.INFO)
logging.info('Start reaction bot.')

BASE_DIR = Path(sys.argv[0]).parent
WORK_DIR = BASE_DIR.joinpath('sessions')
CONFIG_FILE_EXTENSION = ('ini', 'json')

possible_key_names = {
    'api_id': ['api_id', 'app_id'],
    'api_hash': ['api_hash', 'app_hash'],
    'app_version': ['app_version'],
    'device_model': ['device_model', 'device'],
    'system_version': ['system_version', 'sdk'],
    'phone_number': ['phone_number', 'phone']
}

emojis = ['üëç', '‚ù§Ô∏è', 'üî•', 'ü•∞', 'üëè', 'üòÅ', 'ü§î', 'ü§Ø', 'üéâ', 'ü§©', '‚ö°Ô∏è', 'üíØ', '‚ù§Ô∏è‚Äçüî•', 'üôèüèª']


async def send_reaction(client: Client, message: types.Message) -> None:
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–π"""
    emoji = random.choice(emojis)
    await client.send_reaction(chat_id=message.chat.id, message_id=message.id, emoji=emoji)


async def make_work_dir() -> None:
    """–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é sessions –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""
    if WORK_DIR.exists():
        return
    WORK_DIR.mkdir()


async def get_config_files_path() -> list[Path]:
    """–ë–µ—Ä–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª—ã"""
    return [file for file in WORK_DIR.iterdir() if file.suffix.lower()[1:] in CONFIG_FILE_EXTENSION]


async def config_from_ini_file(file_path: Path) -> dict:
    """–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ *.ini —Ñ–∞–π–ª–∞"""
    config_parser = configparser.ConfigParser()
    config_parser.read(file_path)
    section = config_parser.sections()[0]
    return {**config_parser[section]}


async def config_from_json_file(file_path: Path) -> dict:
    """–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ *.json —Ñ–∞–π–ª–∞"""
    with open(file_path) as f:
        return json.load(f)


async def get_config(file_path: Path) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏"""
    config = {
        'ini': config_from_ini_file,
        'json': config_from_json_file,
    }
    extension = file_path.suffix.lower()[1:]
    config = await config[extension](file_path)
    normalized_confing = {'name': file_path.name.split('.')[0]}
    for key, values in possible_key_names.items():
        for value in values:
            if not config.get(value):
                continue
            normalized_confing[key] = config[value]
            break
    return normalized_confing


async def create_clients(config_files: list[Path]) -> list[Client]:
    """
    –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã 'Client' –∏–∑ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–æ–≤.
    **–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–ª—é—á–∞ name, —Ç–æ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ —Å–µ—Å—Å–∏—é!**
    """
    clients = []
    for config_file in config_files:
        try:
            config_dict = await get_config(config_file)
            clients.append(Client(workdir=WORK_DIR.__str__(), **config_dict))
        except Exception:
            logging.warning(traceback.format_exc())
    return clients


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
        - –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é sessions –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.
        - –ë–µ—Ä–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª—ã (*.json, *.ini)
        - –°–æ–∑–¥–∞–µ–º –ø–æ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        - –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º, –¥–æ–±–∞–≤–ª—è–µ–º handler, —Å—Ç–∞—Ä—Ç—É–µ–º, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É
        - –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º (–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
    """

    await make_work_dir()
    config_files = await get_config_files_path()

    apps = await create_clients(config_files)
    if not apps:
        raise ValueError('–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤!')

    for app in apps:
        message_handler = MessageHandler(send_reaction, filters=filters.chat(channels))
        app.add_handler(message_handler)

        await app.start()

        for channel in channels:
            await app.join_chat(channel)

    await idle()

    for app in apps:
        await app.stop()


if __name__ == '__main__':
    while True:
        try:
            asyncio.run(main())
        except Exception:
            logging.critical(traceback.format_exc())

        logging.info(f'–û–∂–∏–¥–∞–Ω–∏–µ {ERROR_SLEEP} —Å–µ–∫ –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã')
        time.sleep(ERROR_SLEEP)
